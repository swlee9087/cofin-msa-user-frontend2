{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\cofin-msa-user-frontend2\\\\src\\\\user\\\\components\\\\UserJoin.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate, useHistory } from 'react-router-dom'; // import { useNavigate } from 'react-router';\n// material\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const navigate = useNavigate(); // useEffect(() => {\n  //   if (user) {\n  //     navigate('/');\n  //     console.log(user);\n  //   }\n  // }, [navigate, user]);\n\n  const [showPassword, setShowPassword] = useState(false); // const history=useHistory()\n\n  const SERVER = 'http://127.0.0.1:8000/api/user/join';\n  const {\n    user_email,\n    username,\n    password,\n    user_name,\n    user_birthday,\n    user_sex,\n    user_phone,\n    user_address,\n    user_vaccinated,\n    vaccine_type\n  } = 'user'; // const userJoin=joinRequest=>axios.post(`${SERVER}/??`, JSON.stringify(joinRequest),{headers})\n\n  const RegisterSchema = Yup.object().shape({\n    user_email: Yup.string().email('메일 형식에 맞게 입력해주세요').required('메일 주소를 입력해주세요'),\n    password: Yup.string().required('비밀번호 6 ~ 12자 이내로 작성해주세요').min(6, '6 ~ 12자 이내로 작성해주세요'),\n    passwordConfirm: Yup.string().oneOf([Yup.ref('password'), null], '비밀번호가 일치하지 않습니다'),\n    username: Yup.string().required('아이디 6 ~ 12자 이내로 작성해주세요').min(6, '6 ~ 12자 이내로 작성해주세요'),\n    user_birthday: Yup.string().required('생년월일 8자리 입력해주세요').min(8),\n    user_sex: Yup.string().required(),\n    user_phone: Yup.string().required('연락처 11자리 입력해주세요'),\n    user_address: Yup.string().required(),\n    user_vaccinated: Yup.string().required('백신 접종완료 여부를 알려주세요'),\n    vaccine_type: Yup.string()\n  });\n  const formik = useFormik({\n    initialValues: {\n      user_email: '',\n      username: '',\n      password: '',\n      user_name: '',\n      user_birthday: '',\n      user_sex: '',\n      user_phone: '',\n      user_address: '',\n      user_vaccinated: '',\n      vaccine_type: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/', {\n        replace: true\n      });\n    }\n  });\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First name\",\n            ...getFieldProps('firstName'),\n            error: Boolean(touched.firstName && errors.firstName),\n            helperText: touched.firstName && errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Last name\",\n            ...getFieldProps('lastName'),\n            error: Boolean(touched.lastName && errors.lastName),\n            helperText: touched.lastName && errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterForm, \"TyfXYEpvWDWRGnFGjig1zuRer3M=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["C:/Users/USER/Documents/GitHub/cofin-msa-user-frontend2/src/user/components/UserJoin.js"],"names":["Yup","useState","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","useNavigate","useHistory","Stack","TextField","IconButton","InputAdornment","LoadingButton","RegisterForm","navigate","showPassword","setShowPassword","SERVER","user_email","username","password","user_name","user_birthday","user_sex","user_phone","user_address","user_vaccinated","vaccine_type","RegisterSchema","object","shape","string","email","required","min","passwordConfirm","oneOf","ref","formik","initialValues","validationSchema","onSubmit","replace","errors","touched","handleSubmit","isSubmitting","getFieldProps","xs","sm","Boolean","firstName","lastName","endAdornment","prev"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate, useHistory } from 'react-router-dom';\n// import { useNavigate } from 'react-router';\n// material\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n\nexport default function RegisterForm() {\n  const navigate = useNavigate();\n  // useEffect(() => {\n  //   if (user) {\n  //     navigate('/');\n  //     console.log(user);\n  //   }\n  // }, [navigate, user]);\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  // const history=useHistory()\n\n  const SERVER='http://127.0.0.1:8000/api/user/join'\n\n  const{user_email, username, password, \n    user_name, user_birthday, user_sex, user_phone, \n    user_address, user_vaccinated, vaccine_type}='user'\n  \n  // const userJoin=joinRequest=>axios.post(`${SERVER}/??`, JSON.stringify(joinRequest),{headers})\n  \n\n  const RegisterSchema = Yup.object().shape({\n    user_email: Yup.string().email('메일 형식에 맞게 입력해주세요').required('메일 주소를 입력해주세요'),\n    password: Yup.string().required('비밀번호 6 ~ 12자 이내로 작성해주세요').min(6, '6 ~ 12자 이내로 작성해주세요'),  \n    passwordConfirm: Yup.string().oneOf([Yup.ref('password'), null], '비밀번호가 일치하지 않습니다'),\n    username: Yup.string().required('아이디 6 ~ 12자 이내로 작성해주세요').min(6, '6 ~ 12자 이내로 작성해주세요'),\n    user_birthday: Yup.string().required('생년월일 8자리 입력해주세요').min(8),\n    user_sex: Yup.string().required(),\n    user_phone: Yup.string().required('연락처 11자리 입력해주세요'),\n    user_address: Yup.string().required(),\n    user_vaccinated: Yup.string().required('백신 접종완료 여부를 알려주세요'),\n    vaccine_type: Yup.string()        \n    });\n\n  const formik = useFormik({\n    initialValues: {\n      user_email: '',\n        username:'',\n        password: '',\n        user_name: '',\n        user_birthday: '',\n        user_sex:'',\n        user_phone:'',\n        user_address:'',\n        user_vaccinated:'',\n        vaccine_type:''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/', { replace: true });\n    }\n  });\n\n  \n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              label=\"First name\"\n              {...getFieldProps('firstName')}\n              error={Boolean(touched.firstName && errors.firstName)}\n              helperText={touched.firstName && errors.firstName}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Last name\"\n              {...getFieldProps('lastName')}\n              error={Boolean(touched.lastName && errors.lastName)}\n              helperText={touched.lastName && errors.lastName}\n            />\n          </Stack>\n\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            {...getFieldProps('email')}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n\n          <LoadingButton\n            fullWidth\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            Register\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}"]},"metadata":{},"sourceType":"module"}